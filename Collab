#Algoritmo 1
def fact(n):
    product = 1
    for i in range(n):
        product = product * (i+1)
    return product

print (fact(5))
#Algoritmo 2
def fact2(n):
    if n == 0:
        return 1
    else:
        return n * fact2(n-1)

print (fact2(5))

#Algoritmo 1
%timeit fact(500)

#Algoritmo 2
%timeit fact2(500)
#Complejidad Constante

def constant_algo(items):
    result = items[0] * items[0]
    print (result)

constant_algo([4, 5, 6, 8])

# Gráfica
import matplotlib.pyplot as plt
import numpy as np

x = [2, 4, 6, 8, 10, 12]

y = [2, 2, 2, 2, 2, 2]

plt.plot(x, y, 'b')
plt.xlabel('Entradas')
plt.ylabel('Pasos')
plt.title('Complejidad Constante')
plt.show()

# Complejidad Lineal 
def linear_algo(items):
    for item in items:
        print(item)
        
#Gráfica        
import matplotlib.pyplot as plt
import numpy as np

x = [2, 4, 6, 8, 10, 12]

y = [2, 4, 6, 8, 10, 12]

plt.plot(x, y, 'b')
plt.xlabel('Entradas')
plt.ylabel('Pasos')


def linear_algo(items):
    for item in items:
        print(item)

    for item in items:
        print(item)

linear_algo([4, 5, 6, 8])
plt.title('Complejidad Lineal')
plt.show()
linear_algo([4, 5, 6, 8])

import matplotlib.pyplot as plt
import numpy as np

x = [2, 4, 6, 8, 10, 12]

y = [4, 8, 12, 16, 20, 24]

plt.plot(x, y, 'b')
plt.xlabel('Entradas')
plt.ylabel('Pasos')
plt.title('Complejidad Lineal')
plt.show()

#Complejidad Cuadrática

def quadratic_algo(items):
    for item in items:
        for item2 in items:
            print(item, ' ' ,item)
#Complejidad de Funciones Complejas

vvdef complex_algo(items):

    for i in range(5):
        print ("Python es fenomenal")

    for item in items:
        print(item)

    for item in items:
        print(item)

    print("Big O")
    print("Big O")
    print("Big O")

complex_algo([4, 5, 6, 8])

#Peor vs mejor complejidad de caso
def search_algo(num, items):
    for item in items:
        if item == num:
            return True
        else:
            return False
nums = [2,4,6,8,10]

print(search_algo(6, nums))
quadratic_algo([4, 5, 6, 8])


# Complejidad Espacial

def return_squares(n):
    square_list = []
    for num in n:
        square_list.append(num * num)

    return square_list

nums = [2, 4, 6, 8, 10]
print(return_squares(nums))
